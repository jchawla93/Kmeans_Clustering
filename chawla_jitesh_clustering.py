import pandas as pdimport sysimport randomimport operatorimport numpy as nmfrom itertools import *from collections import defaultdictimport operatoroutput_file = open("chawla_jitesh_clustering.txt",'w')if __name__ == '__main__':    inputfile = str(sys.argv[1])    initialPoints = str(sys.argv[2])    K = int(sys.argv[3])#    iterations = int(sys.argv[4])import csvimport sys  # used for passing in the argumentpd.set_option('max_columns', 50)pd.set_option('display.width', 1000)# inputfile = "/Users/jiteshchawla/PycharmProjects/Kmeans_Clustering/input_car.txt"column_list = ['buying', 'maint', 'doors', 'persons', 'lug_boot', 'safety','Class']# row_list = []# listOfrecords = []rand_index_list=[]centroid_list=[]centroid_list_final=[]# utility_matrix1_list=[]min_dist_list_index=[]sum2=[]enum_final=[]row_list = []initial_cluster_dict= {}temp_dict={'unacc':0,'acc':0,'good':0,'vgood':0}suml12 = 0intermediate_cluster_dict= defaultdict(list)# utility_matrix1 = pd.DataFrame(index=row_list, columns=column_list)utility_matrix1 = pd.read_csv(inputfile, header=None, names=column_list)utility_matrix1_raw = pd.read_csv(inputfile, header=None, names=column_list)utility_matrix2 = pd.read_csv(initialPoints, header=None, names=column_list)# print(utility_matrix1)# print(list(utility_matrix1.loc[0]))# print(utility_matrix1_raw['Class'][0])# print(utility_matrix1_raw['doors'][:])utility_matrix1=utility_matrix1.drop('Class',axis=1)# utility_matrix1= utility_matrix1.replace('5more', int(4))# utility_matrix1= utility_matrix1.replace('more', int(3))utility_matrix2=utility_matrix2.drop('Class',axis=1)def replace(utility_matrix1):    # utility_matrix1 =utility_matrix1.replace('vhigh', int(4))    # utility_matrix1= utility_matrix1.replace('high', int(3))    # utility_matrix1 = utility_matrix1.replace('small', int(1))    # utility_matrix1= utility_matrix1.replace('low', int(1))    # utility_matrix1 = utility_matrix1.replace('med', int(2))    # utility_matrix1 = utility_matrix1.replace('big', int(3))    # utility_matrix1= utility_matrix1.replace('5more', int(4))    # utility_matrix1= utility_matrix1.replace('more', int(3))    # utility_matrix1 = utility_matrix1.replace('2' , int(1))    #    # utility_matrix1 = utility_matrix1.replace('3', int(2))    for j in range(len(utility_matrix1)):        # print(j)        if utility_matrix1['doors'][j]==int(2):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['doors'][j], int(1))        elif utility_matrix1['doors'][j] == int(3):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['doors'][j], int(2))        elif utility_matrix1['doors'][j] == int(4):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['doors'][j], int(3))        elif utility_matrix1['doors'][j] == str('5more'):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['doors'][j], int(4))        # if utility_matrix1['buying'][j] == str('vhigh'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['buying'][j], int(4))        # elif utility_matrix1['buying'][j] == str('high'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['buying'][j], int(3))        # elif utility_matrix1['buying'][j] == str('med'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['buying'][j], int(2))        # elif utility_matrix1['buying'][j] == str('low'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['buying'][j], int(1))        #        # if utility_matrix1['maint'][j] == str('vhigh'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['maint'][j], int(4))        # elif utility_matrix1['maint'][j] == str('high'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['maint'][j], int(3))        # elif utility_matrix1['maint'][j] == str('med'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['maint'][j], int(2))        # elif utility_matrix1['maint'][j] == str('low'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['maint'][j], int(1))        #        #        # if utility_matrix1['lug_boot'][j] == str('small'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['lug_boot'][j], int(1))        # if utility_matrix1['lug_boot'][j] == str('med'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['lug_boot'][j], int(2))        # if utility_matrix1['lug_boot'][j] == str('big'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['lug_boot'][j], int(3))        #        # if utility_matrix1['safety'][j] == str('low'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['safety'][j], int(1))        # if utility_matrix1['safety'][j] == str('med'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['safety'][j], int(2))        # if utility_matrix1['safety'][j] == str('high'):        #     utility_matrix1 = utility_matrix1.replace(utility_matrix1['safety'][j], int(3))        if utility_matrix1['persons'][j] == int(2):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['persons'][j], int(1))        elif utility_matrix1['persons'][j] == int(4):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['persons'][j], int(2))        if utility_matrix1['persons'][j] == str('more'):            utility_matrix1 = utility_matrix1.replace(utility_matrix1['persons'][j], int(3))    utility_matrix1 =utility_matrix1.replace('vhigh', int(4))    utility_matrix1= utility_matrix1.replace('high', int(3))    utility_matrix1 = utility_matrix1.replace('small', int(1))    utility_matrix1= utility_matrix1.replace('low', int(1))    utility_matrix1 = utility_matrix1.replace('med', int(2))    utility_matrix1 = utility_matrix1.replace('big', int(3))    # utility_matrix1= utility_matrix1.replace('5more', int(4))    # utility_matrix1= utility_matrix1.replace('more', int(3))    # print(utility_matrix1)    # utility_matrix1=utility_matrix1.drop('class',axis=1)    utility_matrix = utility_matrix1.loc[:,:].applymap(float)    # print(utility_matrix)    # map(list, utility_matrix1.values)    utility_matrix1_list = []    for i in range(len(utility_matrix1)):        utility_matrix1_list.append(list(utility_matrix1.loc[i][:]))    # print(utility_matrix1_list)    for n in range(len(utility_matrix1_list)):        for j in range(len(utility_matrix1_list[n])):            utility_matrix1_list[n][j] = int(utility_matrix1_list[n][j])    # print(utility_matrix1_list)    # print(len(utility_matrix1_list))    return utility_matrix,utility_matrix1_listum,utility_matrix1_list=replace(utility_matrix1)# print(um)# print(utility_matrix1_list)cm,centroid_list_final=replace(utility_matrix2)# print(cm)for key in range(K):    #    initial_cluster_dict[key]= centroid_list_final[key]    # intermediate_cluster_dict[key]=list# print(initial_cluster_dict)# print(list(initial_cluster_dict.keys()))for i in utility_matrix1_list:    # sum1=0    dist_list=[]    # min_dist_list_index=[]    for k in centroid_list_final:        sum1 = 0        dist = 0        for z in range(0,len(i)):            sum1+= (i[z]-k[z])**2        dist=nm.sqrt(sum1)        dist_list.append(dist)    # print(dist_list)    min_dist_list_index.append(dist_list.index(min(dist_list)))# print(min_dist_list_index)# print(len(min_dist_list_index))# print(intermediate_cluster_dict)for i in list(initial_cluster_dict.keys()):    for ele in range(len(min_dist_list_index)):        if i == min_dist_list_index[ele]:            intermediate_cluster_dict[i].append(ele)# print(dict(intermediate_cluster_dict))new_centroids=[]for k in range(K):    new_centroids.append(list(um.loc[intermediate_cluster_dict[k]].mean(axis=0)))#print(new_centroids)count_len=0# for key in range(K):for value in dict(intermediate_cluster_dict)[key]:        count_len+=1# print(count_len)# for key in dict(intermediate_cluster_dict).keys():##     for value in dict(intermediate_cluster_dict)[key]:#         for ele in range(0,len(value)):#             # cc+=value[0]#             value_list.append(value)            # print(key,value)# print(value_list)# print(value_list[0])# new_centroids=[]# for k in range(0,3):#     new_centroids.append(utility_matrix1.loc[dict(intermediate_cluster_dict)[i]].mean(axis=0))# print(new_centroids)# for key in dict(intermediate_cluster_dict).keys():#     # print(key)#     for value in range(0,len(list(dict(intermediate_cluster_dict).values())[key])):#         # print(list(dict(intermediate_cluster_dict).values())[key])#         for ele in range(0,len(list(dict(intermediate_cluster_dict).values())[key][value])):#             # print(list(dict(intermediate_cluster_dict).values())[key][value][ele])#             cc[key][ele] += list(dict(intermediate_cluster_dict).values())[key][value][ele]# print(cc)            # print(key,list(dict(intermediate_cluster_dict).values())[key][value][ele])# print(dict(intermediate_cluster_dict).values())# print(list(dict(intermediate_cluster_dict).values())[0])# print(list(dict(intermediate_cluster_dict).values())[0][0])# print(list(dict(intermediate_cluster_dict).values())[0][0][0])#print(enum_final)        # for l in range(0,count_len+1):        #     print(l)            # print(value[l])            # temp_sum+=            # sum2.append(value[l])        # print(sum2)#print utility_matrix1_listdef cluster_name(cluster_kmeans_dict,um):    # temp_dict={}    suml12=0    for clus_key in cluster_kmeans_dict.keys():        # print("\n")        # output_file.write("\n")        # print(max(temp_dict.items(), key=operator.itemgetter(1))[0])        for j in cluster_kmeans_dict[clus_key]:            if (list(um.loc[j])== utility_matrix1_list[j]):                # print(utility_matrix1_raw['Class'][j])                temp_dict[utility_matrix1_raw['Class'][j]] += 1                # temp_dict['unacc'] += 1        for key, value in temp_dict.items():            if (key != max(temp_dict.items(), key=operator.itemgetter(1))[0]):                suml12 += temp_dict[key]        print("cluster: " + str(max(temp_dict.items(), key=operator.itemgetter(1))[0]))        output_file.write("cluster: " + max(temp_dict.items(), key=operator.itemgetter(1))[0]+ "\n")        for j in cluster_kmeans_dict[clus_key]:            print(list(utility_matrix1_raw.loc[j]))            output_file.write(str(list(utility_matrix1_raw.loc[j]))+ "\n")        output_file.write("\n\n")        print("\n")    # print("\n")    # output_file.write("\n\n")    print("Number of points wrongly assigned:")    output_file.write("Number of points wrongly assigned:")    print(suml12)    output_file.write("\n"+str(suml12))        # print(max(temp_dict.items(), key=operator.itemgetter(1))[0])            # print(print(list(utility_matrix1_raw.loc[j])))    # print(temp_dict)    #     print(max(temp_dict.items(), key=operator.itemgetter(1))[0])    #     for key,value in temp_dict.items():    #         if (key != max(temp_dict.items(), key=operator.itemgetter(1))[0]):    #             suml12 += temp_dict[key]        # print(max(temp_dict.items(), key=operator.itemgetter(1))[0])        # print(print(list(utility_matrix1.loc[j])))def k_means(utility_matrix1_list,new_centroids,iterations):    cluster_kmeans_dict={}    for i in range(K):        cluster_kmeans_dict[i]=[]    temp=new_centroids    for i in utility_matrix1_list:        # sum1=0        dist_list = []        min_dist_list_index=[]        for coordinates in new_centroids:            sum1 = 0            dist = 0            for z in range(0, len(i)):                sum1 += (i[z] - coordinates[z]) ** 2            dist = nm.sqrt(sum1)            dist_list.append(dist)        ind=dist_list.index(min(dist_list))        cluster_kmeans_dict[ind].append(utility_matrix1_list.index(i))    # print (dict(cluster_kmeans_dict))    new_centroids = []    for k in range(K):        new_centroids.append(list(um.loc[dict(cluster_kmeans_dict)[k]].mean(axis=0)))    #print new_centroids    if iterations==0 :        # print(cluster_kmeans_dict)        cluster_name(cluster_kmeans_dict, um)        return    iterations-=1    k_means(utility_matrix1_list,new_centroids,iterations)k_means(utility_matrix1_list,new_centroids,iterations)